#
# Setting Defaults
#

# Ask for the administrator password upfront
sudo -v

#
# Putting Aliases in Place
#

sudo rm -rf ~/.aliases
ln -s ~/.dotfiles/.aliases ~/.aliases
source ~/.aliases

sudo rm -rf ~/.editorconfig
ln -s ~/.dotfiles/.editorconfig ~/.editorconfig

sudo rm -rf ~/.functions
ln -s ~/.dotfiles/.functions ~/.functions
source ~/.functions

sudo rm -rf ~/.gemrc
ln -s ~/.dotfiles/.gemrc ~/.gemrc

sudo rm -rf ~/.gitconfig
ln -s ~/.dotfiles/.gitconfig ~/.gitconfig

sudo rm -rf ~/.gitignore
ln -s ~/.dotfiles/.gitignore ~/.gitignore

sudo rm -rf ~/.npmrc
ln -s ~/.dotfiles/.npmrc ~/.npmrc

sudo rm -rf ~/.variables
ln -s ~/.dotfiles/.variables ~/.variables
source ~/.variables

sudo rm -rf ~/.zlogin
ln -s ~/.dotfiles/.zlogin ~/.zlogin

sudo rm -rf ~/.zshrc
ln -s ~/.dotfiles/.zshrc ~/.zshrc

sudo rm -rf ~/.nvmrc
ln -s ~/.dotfiles/.nvmrc ~/.nvmrc

# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Install Apple's Command Line Tools
# echo 'Installing Apple Command Line Tools'
xcode-select --install

# echo 'Set standby delay to 24 hours (default is 1 hour)'
sudo pmset -a standbydelay 86400

# echo 'Set sidebar icon size to medium'
defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

# echo 'Automatically quit printer app once the print jobs complete'
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

# echo 'Disable Resume system-wide'
defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool false

# echo 'Disable automatic termination of inactive apps'
defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

# echo 'Set Help Viewer windows to non-floating mode'
defaults write com.apple.helpviewer DevMode -bool true

# echo 'Disable local Time Machine snapshots'
sudo tmutil disablelocal

# echo 'Disable hibernation (speeds up entering sleep mode)'
sudo pmset -a hibernatemode 0

# echo 'Remove the sleep image file to save disk space'
sudo rm /Private/var/vm/sleepimage
# echo 'Create a zero-byte file instead…'
sudo touch /Private/var/vm/sleepimage
# echo '…and make sure it can’t be rewritten'
sudo chflags uchg /Private/var/vm/sleepimage

# echo 'Disable the sudden motion sensor as it’s not useful for SSDs'
sudo pmset -a sms 0

# echo 'Trackpad: enable tap to click for this user and for the login screen'
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# echo 'Use scroll gesture with the Ctrl (^) modifier key to zoom'
defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
# Follow the keyboard focus while zoomed in
defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

# echo 'Automatically illuminate built-in MacBook keyboard in low light'
defaults write com.apple.BezelServices kDim -bool true
# echo 'Turn off keyboard illumination when computer is not used for 5 minutes'
defaults write com.apple.BezelServices kDimTime -int 300

# echo 'Set language and text formats'
# echo 'Note: if you’re in the US, replace `EUR` with `USD`, `Centimeters` with'
# echo '`Inches`, `en_GB` with `en_US`, and `true` with `false`.'
defaults write NSGlobalDomain AppleLanguages -array "en"
defaults write NSGlobalDomain AppleLocale -string "en_GB@currency=GBP"
defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
defaults write NSGlobalDomain AppleMetricUnits -bool true

# echo 'Require password immediately after sleep or screen saver begins'
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# echo 'Save screenshots to the desktop'
defaults write com.apple.screencapture location -string "${HOME}/Desktop"

# echo 'Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)'
defaults write com.apple.screencapture type -string "png"

# echo 'Disable shadow in screenshots'
defaults write com.apple.screencapture disable-shadow -bool true

# echo 'Enable subpixel font rendering on non-Apple LCDs'
defaults write NSGlobalDomain AppleFontSmoothing -int 2

# echo 'Finder: show hidden files by default'
defaults write com.apple.finder AppleShowAllFiles -bool true

# echo 'Finder: show all filename extensions'
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# echo 'When performing a search, search the current folder by default'
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# echo 'Disable the warning when changing a file extension'
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# echo 'Avoid creating .DS_Store files on network volumes'
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

# echo 'Use list view in all Finder windows by default'
# echo 'Four-letter codes for the view modes:'
# echo 'Flwv ▸ Cover Flow View'
# echo 'Nlsv ▸ List View'
# echo 'clmv ▸ Column View'
# echo 'icnv ▸ Icon View'
defaults write com.apple.Finder FXPreferredViewStyle clmv

# echo 'Enabling AirDrop over Ethernet and on unsupported Macs running Lion'
defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

# echo 'Enabling the MacBook Air SuperDrive on any Mac'
sudo nvram boot-args="mbasd=1"

# echo 'Revealing the ~/Library folder'
chflags nohidden ~/Library

# echo 'Setting the icon size of Dock items to 36 pixels'
defaults write com.apple.dock tilesize -int 36

# echo 'Minimize windows into their application’s icon'
defaults write com.apple.dock minimize-to-application -bool true

# echo 'Enabling spring loading for all Dock items'
defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true

# echo 'Remove indicator lights for open applications in the Dock'
defaults write com.apple.dock show-process-indicators -bool false

# echo 'Wipe all (default) app icons from the Dock'
# echo 'This is only really useful when setting up a new Mac, or if you don’t use'
# echo 'the Dock to launch apps.'
defaults write com.apple.dock persistent-apps -array

# echo 'Don’t animate opening applications from the Dock'
defaults write com.apple.dock launchanim -bool false

# echo 'Disabling Dashboard'
defaults write com.apple.dashboard mcx-disabled -bool true

# echo 'Don’t show Dashboard as a Space'
defaults write com.apple.dock dashboard-in-overlay -bool true

# echo 'Don’t automatically rearrange Spaces based on most recent use'
defaults write com.apple.dock mru-spaces -bool false

# echo 'Disabling the auto-hiding Dock delay'
defaults write com.apple.dock autohide-delay -float 0

# echo 'Automatically hide and show the Dock'
defaults write com.apple.dock autohide -bool true

# echo 'Only use UTF-8 in Terminal.app'
defaults write com.apple.terminal StringEncodings -array 4

# echo 'Don’t display the annoying prompt when quitting iTerm'
defaults write com.googlecode.iterm2 PromptOnQuit -bool false

# echo 'Preventing restoration of launched apps on restart etc'
defaults write -g ApplePersistence -bool no

# echo 'Disabling Time Machine hassling you each time you plug in a new external drive'
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

sudo rm -rf ~/Library/Preferences/com.googlecode.iterm2.plist
ln -s ~/.dotfiles/Settings/iTerm/com.googlecode.iterm2.plist ~/Library/Preferences/com.googlecode.iterm2.plist
defaults read com.googlecode.iterm2
killall cfprefsd

#send_notification "Aliases of all of the files that I need have been put in place." "OS X Aliases setup"

#
# Configuring Environment
#

touch ~/.hushlogin

#
# Install homebrew
# Install git
# Install ruby
#

ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew tap homebrew/dupes
brew update
brew install coreutils bash git rbenv ruby-build homebrew/dupes/grep

rbenv init
rbenv install 2.2.3
rbenv global 2.2.3

brew cleanup
#send_notification "Core Utilities, git, and ruby are now installed" "Homebrew Installed"

eval "$(rbenv init -)"

#
# Install ZSH
#

curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
#send_notification "Oh My ZSH has been installed on this Mac." "Oh My ZSH Installed"
mkdir ~/.oh-my-zsh/custom/themes
sudo rm -rf ~/.oh-my-zsh/custom/themes/bullet-train.zsh-theme
ln -s ~/.dotfiles/bullet-train.zsh-theme ~/.oh-my-zsh/custom/themes/bullet-train.zsh-theme

#
# Install jekyll
#

echo 'Installing Sass'
gem install jekyll

gem update
#send_notification "Ruby Gems have been installed and updated on this machine." "Ruby Gems Installed/Updated"

#
# NVM Setup
#


#send_notification "Installing NVM" "Installing NVM and the latest version of Node.js and Gulp.js"
git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags` && git checkout master
nvm install stable
nvm use stable
nvm alias default stable
npm install --global gulp

source ~/.aliases
source ~/.editorconfig
source ~/.functions
source ~/.gemrc
source ~/.gitconfig
source ~/.gitignore
source ~/.npmrc
source ~/.variables
source ~/.zlogin
source ~/.zshrc
source ~/.nvmrc

#send_notification "Quitting all affected apps, including iTerm and Terminal." "Setup Complete"

# echo 'Restarting affected apps'
for app in "Dock" "Finder" "Mail" \
        "Messages" "SystemUIServer" "Terminal" 'iTerm' \
        ; do
        killall "${app}" > /dev/null 2>&1
done
